"""Monthly summary model."""

from sqlalchemy import Column, String, DateTime, Date, Integer, Numeric, ForeignKey, UniqueConstraint
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid

from app.core.database import Base


class MonthlySummary(Base):
    """
    Monthly aggregated summary model.
    
    Stores pre-calculated monthly totals for farmers to optimize reporting
    and payment processing. Generated by scheduled job.
    """
    
    __tablename__ = "monthly_summaries"
    
    # Primary key
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Foreign keys
    farmer_id = Column(UUID(as_uuid=True), ForeignKey("farmers.id", ondelete="RESTRICT"), nullable=False, index=True)
    
    # Period (first day of month: YYYY-MM-01)
    month = Column(Date, nullable=False, index=True)
    
    # Aggregated metrics
    total_liters = Column(Numeric(10, 3), nullable=False, default=0)
    total_deliveries = Column(Integer, nullable=False, default=0)
    avg_fat_content = Column(Numeric(5, 2))
    
    # Quality breakdown
    grade_a_count = Column(Integer, default=0)
    grade_b_count = Column(Integer, default=0)
    grade_c_count = Column(Integer, default=0)
    rejected_count = Column(Integer, default=0)
    
    # Payment calculation
    estimated_payment = Column(Numeric(12, 2))  # In currency units
    currency = Column(String(3), default="KES", nullable=False)
    
    # Timestamps
    generated_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)
    
    # Constraints
    __table_args__ = (
        UniqueConstraint("farmer_id", "month", name="unique_farmer_month"),
    )
    
    # Relationships
    farmer = relationship("Farmer", back_populates="monthly_summaries")
    payments = relationship("Payment", back_populates="monthly_summary")
    
    def __repr__(self) -> str:
        return f"<MonthlySummary(id={self.id}, farmer_id={self.farmer_id}, month={self.month}, liters={self.total_liters})>"
